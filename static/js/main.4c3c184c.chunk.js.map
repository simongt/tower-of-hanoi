{"version":3,"sources":["components/constants/Layout.js","components/constants/ItemTypes.js","components/game/Disk.jsx","components/util/Overlay.jsx","components/game/Tower.jsx","lib/withDragDropContext.js","components/game/Setting.jsx","components/layout/Header.jsx","components/layout/Footer.jsx","components/App.jsx","index.js"],"names":["TOWER_WIDTH","concat","SETTING_HEIGHT","TOWER_HEIGHT","Layout","HEADER_HEIGHT","FOOTER_HEIGHT","DISK_HEIGHT","DISK_WIDTH_FACTOR","NUM_DISKS","MAX_TOTAL_DISKS","ItemTypes","Disk","_this$props","this","props","rank","connectDragSource","isDragging","display","opacity","width","offset","green","diskStyle","height","transform","borderRadius","border","boxShadow","background","react_default","a","createElement","style","Component","DragSource","beginDrag","_ref","connect","monitor","dragSource","connectDragPreview","dragPreview","Overlay","overlayStyle","towerTarget","canDrop","isValidMove","diskIsOverTower","isOver","getItem","target","parseInt","targetId","substr","drop","_ref2","removeDisk","insertDisk","hover","Tower","disks","connectDropTarget","diskDragged","towerStyle","position","borderStyle","borderWidth","alignItems","alignContent","util_Overlay","map","disk","game_Disk","key","id","DropTarget","dropTarget","DragDropContext","HTML5Backend","FloorSpace","borderBottom","Setting","towers","numMovesPlayed","gameIsWon","i","settingStyle","Setting_FloorSpace","game_Tower","diskId","towerId","gridTemplateColumns","justifyContent","overflow","withDragDropContext","Header","paddingBottom","color","fontSize","textTransform","fontWeight","textShadow","Footer","hrefFooter","textDecoration","padding","href","rel","className","marginRight","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","push","setState","componentDidUpdate","state","console","log","prevState","forEach","tower","filter","unshift","length","layoutStyle","layout_Header","game_Setting","layout_Footer","gridTemplateRows","mountNode","document","getElementById","ReactDOM","render","components_App"],"mappings":"+LAOMA,EAAW,GAAAC,OAAM,EAAN,MAGXC,EAAc,YAAAD,OAFD,YAEC,OAAAA,OADD,OACC,KACdE,EAAY,IAAAF,OAAOD,EAAP,SAAAC,OARA,EAQA,SA+BHG,EAAA,CACbJ,cACAK,cApCiB,YAqCjBC,cApCiB,OAqCjBJ,iBACAC,eACAI,YApCe,KAAAN,OAAQE,EAAR,WAqCfK,kBA3BW,EA4BXC,UA/CgB,EAgDhBC,gBA/CsB,WCHTC,EACP,OCiBFC,mLACK,IAAAC,EACyCC,KAAKC,MAA7CC,EADDH,EACCG,KAAMC,EADPJ,EACOI,kBAAmBC,EAD1BL,EAC0BK,WAC3BC,EAAUD,EAAa,OAAS,QAChCE,EAAUF,EAAa,GAAM,EAC7BG,EAAK,IAAApB,OAAOG,EAAOJ,YAAd,OAAAC,OAA+Be,EAAOZ,EAAOI,kBAA7C,OACLc,EAAM,GAAArB,OAAMe,EAAOZ,EAAOI,kBAAoB,EAAxC,MAENe,EAAQ,IAAMP,GAAQ,IAAaZ,EAAOK,WAC1Ce,EAAY,CAChBL,QAASA,EACTC,QAASA,EACTK,OAAM,kBAAAxB,OACFG,EAAOG,YADL,OAAAN,OACsBG,EAAOM,gBAD7B,OAAAT,OACkDG,EAAOK,UADzD,aAGNY,MAAK,QAAApB,OAAUoB,EAAV,KACLK,UAAS,yBAAAzB,OAA2BqB,EAA3B,OACTK,aAAY,SAAA1B,OAAWG,EAAOG,YAAlB,YACZqB,OAAQ,kBACRC,UAAW,wBACXC,WAAU,YAAA7B,OAAcsB,EAAd,UAEZ,OAAON,EAAkBc,EAAAC,EAAAC,cAAA,OAAKC,MAAOV,EAAWR,KAAMA,YAtBvCmB,aA0BJC,uBAAWzB,EAvCP,CACjB0B,UADiB,SAAAC,GAEf,MAAO,CAAEtB,KADSsB,EAARtB,QAME,SAACuB,EAASC,GAAV,MAAuB,CACrCvB,kBAAmBsB,EAAQE,aAC3BC,mBAAoBH,EAAQI,cAC5BzB,WAAYsB,EAAQtB,eA6BPkB,CAAgDxB,GCpBhDgC,EAtBC,SAAAN,GAAY,IAAVtB,EAAUsB,EAAVtB,KACVK,EAAK,IAAApB,OAAOG,EAAOJ,YAAd,OAAAC,OAA+Be,EAAOZ,EAAOI,kBAA7C,OACLc,EAAM,GAAArB,OAAMe,EAAOZ,EAAOI,kBAAoB,EAAxC,MAENe,EAAQ,IAAMP,GAAQ,IAAaZ,EAAOK,WAC1CoC,EAAc,CAClBf,WAAU,YAAA7B,OAAcsB,EAAd,SACVG,UAAS,yBAAAzB,OAA2BqB,EAA3B,OACTM,OAAQ,kBACRD,aAAY,SAAA1B,OAAWG,EAAOG,YAAlB,YACZkB,OAAM,kBAAAxB,OACAG,EAAOG,YADP,OAAAN,OACwBG,EAAOM,gBAD/B,OAAAT,OACoDG,EAAOK,UAD3D,aAGNY,MAAK,QAAApB,OAAUoB,EAAV,KACLQ,UAAW,wBACXT,QAAS,QAEX,OACEW,EAAAC,EAAAC,cAAA,OAAKC,MAAOW,KCbVC,EAAc,CAClBC,QADkB,SAAAT,EACOE,GAAS,IAAxBQ,EAAwBV,EAAxBU,YACFC,EAAkBT,EAAQU,SAC1BlC,EAAOwB,EAAQW,UAAUnC,KACzBoC,EAASC,SAASb,EAAQc,SAASC,OAAO,IAAM,EACtD,QAAON,GAAkBD,EAAYhC,EAAMoC,IAE7CI,KAPkB,SAAAC,EAOejB,GAAS,IAAnCkB,EAAmCD,EAAnCC,WAAYC,EAAuBF,EAAvBE,WACX3C,EAAOwB,EAAQW,UAAUnC,KACzBoC,EAASC,SAASb,EAAQc,SAASC,OAAO,IAAM,EACtDG,EAAW1C,GACX2C,EAAW3C,EAAMoC,IAEnBQ,MAbkB,cAuBdC,mLACK,IAAAhD,EASHC,KAAKC,MAPP+C,EAFKjD,EAELiD,MACAC,EAHKlD,EAGLkD,kBACAd,EAJKpC,EAILoC,gBAEAe,EANKnD,EAMLmD,YAIIlC,EAAamB,EAAe,iVAc5BtB,EAAY,SAAA1B,OAAYG,EAAOJ,YAAnB,UACZiE,EAAa,CACjBC,SAAU,WACV7C,MAAO,OACPI,OAAM,QAAAxB,OAAUG,EAAOD,aAAjB,KACNgE,YAAa,QACbC,YAAa,kBACbzC,aAAY,GAAA1B,OAAK0B,EAAL,KAAA1B,OAAqB0B,EAArB,QACZR,QAAS,OACTkD,WAAY,MACZC,aAAc,MACdxC,WAAYA,GAGd,OAAOiC,EACLhC,EAAAC,EAAAC,cAAA,OAAKC,MAAO+B,GAEThB,GAAmBlB,EAAAC,EAAAC,cAACsC,EAAD,CAASvD,KAAMgD,EAAYhD,OAE9C8C,GAASA,EAAMU,IAAI,SAAAC,GAAI,OAAI1C,EAAAC,EAAAC,cAACyC,EAAD,CAAMC,IAAKF,EAAKG,GAAI5D,KAAMyD,EAAKG,gBA5C/CzC,aAkDL0C,uBAAWlE,EAAgBmC,EAzD1B,SAACP,EAASC,GAAV,MAAuB,CACrCuB,kBAAmBxB,EAAQuC,aAC3B/B,QAASP,EAAQO,UACjBE,gBAAiBT,EAAQU,SACzBc,YAAaxB,EAAQW,YAqDR0B,CAAiDhB,oBC9EjDkB,4BAAgBC,KCEzBC,EAAa,kBACjBlD,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEgD,aAAc,sBAGxBC,mLACK,IAAAtE,EAQHC,KAAKC,MANPqE,EAFKvE,EAELuE,OACAC,EAHKxE,EAGLwE,eACA3B,EAJK7C,EAIL6C,WACAC,EALK9C,EAKL8C,WACAX,EANKnC,EAMLmC,YACAsC,EAPKzE,EAOLyE,UAEEC,EAAI,EACR,OACExD,EAAAC,EAAAC,cAAA,OAAKC,MAAOsD,GACVzD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,CACEf,IAAKS,EAAOG,GAAGX,GACfd,MAAOsB,EAAOG,KAAKzB,MACnBuB,eAAgBA,EAChB3B,WAAY,SAACiC,GAAD,OAAYjC,EAAWiC,IACnChC,WAAY,SAACgC,EAAQC,GAAT,OAAqBjC,EAAWgC,EAAQC,IACpD5C,YAAa,SAAC2C,EAAQC,GAAT,OAAqB5C,EAAY2C,EAAQC,IACtDN,UAAW,kBAAMA,KAEnBvD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,CACEf,IAAKS,EAAOG,GAAGX,GACfd,MAAOsB,EAAOG,KAAKzB,MACnBuB,eAAgBA,EAChB3B,WAAY,SAACiC,GAAD,OAAYjC,EAAWiC,IACnChC,WAAY,SAACgC,EAAQC,GAAT,OAAqBjC,EAAWgC,EAAQC,IACpD5C,YAAa,SAAC2C,EAAQC,GAAT,OAAqB5C,EAAY2C,EAAQC,IACtDN,UAAW,kBAAMA,KAEnBvD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,CACEf,IAAKS,EAAOG,GAAGX,GACfd,MAAOsB,EAAOG,KAAKzB,MACnBuB,eAAgBA,EAChB3B,WAAY,SAACiC,GAAD,OAAYjC,EAAWiC,IACnChC,WAAY,SAACgC,EAAQC,GAAT,OAAqBjC,EAAWgC,EAAQC,IACpD5C,YAAa,SAAC2C,EAAQC,GAAT,OAAqB5C,EAAY2C,EAAQC,IACtDN,UAAW,kBAAMA,KAEnBvD,EAAAC,EAAAC,cAACwD,EAAD,cA3CctD,aAkDhBqD,EAAe,CACnB/D,OAAM,QAAAxB,OAAUG,EAAOF,eAAjB,KACNiB,QAAS,OACT0E,oBAAmB,wBAAA5F,OAEVG,EAAOJ,YAFG,4BAAAC,OAIVG,EAAOJ,YAJG,4BAAAC,OAMVG,EAAOJ,YANG,kBASnB8F,eAAgB,UAChBzB,WAAY,MACZ0B,SAAU,UAGGC,IAAoBb,GC7CpBc,mLA3BX,OACElE,EAAAC,EAAAC,cAAA,UACEC,MAAO,CACLgE,cAAe,SACf/E,QAAS,OACT2E,eAAgB,SAChBzB,WAAY,WACZvC,WAAY,0DACZoD,aAAc,oBAGhBnD,EAAAC,EAAAC,cAAA,MACEC,MAAO,CACLiE,MAAO,uBACPC,SAAU,mBACVC,cAAe,YACfC,WAAY,MACZC,WAAY,iCAGb,2BAtBUpE,aCkDNqE,mLAhDX,IAAMC,EAAa,CACjBN,MAAO,uBACPO,eAAgB,OAChBJ,WAAY,MACZC,WAAY,yBAEd,OACExE,EAAAC,EAAAC,cAAA,UACEC,MAAO,CACLyE,QAAS,WACTxF,QAAS,OACT2E,eAAgB,gBAChBzB,WAAY,SACZ8B,MAAO,QACPC,SAAU,OACVtE,WACE,4DAGJC,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEmE,cAAe,cACzBtE,EAAAC,EAAAC,cAAA,KACE2E,KAAK,6CACLxD,OAAO,SACPyD,IAAI,sBACJ3E,MAAOuE,GAEP1E,EAAAC,EAAAC,cAAA,KACE6E,UAAU,gBACV5E,MAAO,CAAE6E,YAAa,aAEvB,WAGLhF,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEmE,cAAe,cACzBtE,EAAAC,EAAAC,cAAA,KACE2E,KAAK,sBACLxD,OAAO,SACPyD,IAAI,sBACJ3E,MAAOuE,GAEN,6BA1CQtE,aCIf6E,cAEJ,SAAAA,EAAYjG,GAAO,IAAAkG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApG,KAAAkG,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAApG,KAAAoG,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxG,KAAMC,KAYRwG,kBAAoB,WAElB,IADA,IAAMzD,EAAQ,GACNc,EAAK,EAAGA,GAAMxE,EAAOK,UAAWmE,IACtCd,EAAM0D,KAAK,CAAC5C,GAAIA,IAElBqC,EAAKQ,SAAS,CACZrC,OAAQ,CACN,CAAER,GAAI,EAAGd,MAAOA,GAChB,CAAEc,GAAI,EAAGd,MAAO,IAChB,CAAEc,GAAI,EAAGd,MAAO,QAtBHmD,EA2BnBS,mBAAqB,WAAM,IACjBrC,EAAmB4B,EAAKU,MAAxBtC,eACJ4B,EAAK3B,aACPsC,QAAQC,IAAR,wBAAA5H,OAAoCoF,EAApC,aA9Be4B,EAkCnBvD,WAAa,SAACiC,GACZsB,EAAKQ,SAAS,SAAAK,GAOZ,OALAA,EAAU1C,OAAO2C,QAAQ,SAAAC,GACvBA,EAAMlE,MAAQkE,EAAMlE,MAAMmE,OAAO,SAAAxD,GAC/B,OAAOA,EAAKG,KAAOe,MAGf,CACNP,OAAQ0C,EAAU1C,WA3CL6B,EAgDnBtD,WAAa,SAACgC,EAAQC,GACpBqB,EAAKQ,SAAS,SAAAK,GAAS,MAAK,CAE1B1C,OAAQ0C,EAAU1C,OAAOZ,IAAI,SAAAwD,GAI3B,OAHIA,EAAMpD,KAAOgB,GACfoC,EAAMlE,MAAMoE,QAAQ,CAAEtD,GAAIe,IAErBqC,IAET3C,eAAgByC,EAAUzC,eAAiB,MAzD5B4B,EA6DnBjE,YAAc,SAAC2C,EAAQC,GAAY,IACzBR,EAAW6B,EAAKU,MAAhBvC,OAER,OAAyC,IAArCA,EAAOQ,EAAU,GAAG9B,MAAMqE,SAGnBxC,EAASP,EAAOQ,EAAU,GAAG9B,MAAM,GAAGc,MAGtCe,EAASP,EAAOQ,EAAU,GAAG9B,MAAM,GAAGc,MAGtCe,IAAWP,EAAOQ,EAAU,GAAG9B,MAAM,GAAGc,SAA5C,KAzEUqC,EA+EnB3B,UAAY,WAAM,IAERF,EAAW6B,EAAKU,MAAhBvC,OACR,OACEhF,EAAOK,WAAa,IAClB2E,EAAO,GAAGtB,MAAMqE,SAAW/H,EAAOK,WAClC2E,EAAO,GAAGtB,MAAMqE,SAAW/H,EAAOK,YAlFtCwG,EAAKU,MAAQ,CACXtC,eAAgB,EAChBD,OAAQ,CACN,CAAER,GAAI,EAAGd,MAAO,IAChB,CAAEc,GAAI,EAAGd,MAAO,IAChB,CAAEc,GAAI,EAAGd,MAAO,MARHmD,wEA2FjB,OACElF,EAAAC,EAAAC,cAAA,OAAKC,MAAOkG,GACVrG,EAAAC,EAAAC,cAACoG,EAAD,MACAtG,EAAAC,EAAAC,cAACqG,EAAD,CACElD,OAAQtE,KAAK6G,MAAMvC,OACnBC,eAAgBvE,KAAK6G,MAAMtC,eAC3B3B,WAAY5C,KAAK4C,WACjBC,WAAY7C,KAAK6C,WACjBX,YAAalC,KAAKkC,YAClBsC,UAAWxE,KAAKwE,YAElBvD,EAAAC,EAAAC,cAACsG,EAAD,cAxGUpG,aA+GZiG,EAAc,CAClBjH,QAAS,OACTqH,iBAAgB,cAAAvI,OACPG,EAAOC,cADA,gBAAAJ,OAEPG,EAAOF,eAFA,WAAAD,OAGZG,EAAOE,cAHK,QAKhByF,SAAU,UAGGiB,IC1HTyB,UAAYC,SAASC,eAAe,SAE1CC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAASL","file":"static/js/main.4c3c184c.chunk.js","sourcesContent":["// TO-DO: test responsiveness for windows with low height and high width\n\n// game pieces\nconst NUM_DISKS = 3;\nconst MAX_TOTAL_DISKS = 9;\n\n// dimensions\nconst TOWER_WIDTH = `${2 * MAX_TOTAL_DISKS / NUM_DISKS}vw`;\nconst HEADER_HEIGHT = `100vmin/6`;\nconst FOOTER_HEIGHT = `2rem`;\nconst SETTING_HEIGHT = `(100vh - ${HEADER_HEIGHT} - ${FOOTER_HEIGHT})`;\nconst TOWER_HEIGHT = `(${TOWER_WIDTH}) * (${NUM_DISKS} + 1)`;\nconst DISK_HEIGHT = `((${TOWER_HEIGHT}) / 12)`;\n\n// disk width factor\nconst getWidthFactor = () => {\n  switch (NUM_DISKS) {\n    case 1:\n      return 13;\n    case 2:\n      return 10.5;\n    case 3:\n      return 8;\n    case 4:\n      return 6.5;\n    case 5:\n      return 5;\n    case 6:\n      return 4.5;\n    case 7:\n      return 4;\n    case 8:\n      return 3.5;\n    case 9:\n      return 3;\n    default:\n      return 3;\n  }\n}\n\nconst DISK_WIDTH_FACTOR = getWidthFactor();\n\nexport default {\n  TOWER_WIDTH,\n  HEADER_HEIGHT,\n  FOOTER_HEIGHT,\n  SETTING_HEIGHT,\n  TOWER_HEIGHT,\n  DISK_HEIGHT,\n  DISK_WIDTH_FACTOR,\n  NUM_DISKS,\n  MAX_TOTAL_DISKS,\n};\n","// constants for the draggable item types\nexport default {\n  DISK: 'disk',\n}\n","import React, { Component } from 'react'\nimport Layout from \"../constants/Layout\";\nimport { DragSource } from \"react-dnd\";\nimport ItemTypes from \"../constants/ItemTypes\";\n\n// draggable object\nconst diskSource = {\n  beginDrag({ rank }) {\n    return { rank };\n  },\n}\n\n// collecting function\nconst collect = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging(),\n});\n\nclass Disk extends Component {\n  render() {\n    const { rank, connectDragSource, isDragging } = this.props;\n    const display = isDragging ? \"none\" : \"block\";\n    const opacity = isDragging ? 0.5 : 1;\n    const width = `(${Layout.TOWER_WIDTH} + ${rank * Layout.DISK_WIDTH_FACTOR}vw)`;\n    const offset = `${rank * Layout.DISK_WIDTH_FACTOR / 2}vw`;\n    // hue of green: divide spectrum from yellow (200) to red (36)\n    const green = 200 - rank * ((200 - 36) / Layout.NUM_DISKS);\n    const diskStyle = {\n      display: display,\n      opacity: opacity,\n      height: `calc(\n        ${Layout.DISK_HEIGHT} * ${Layout.MAX_TOTAL_DISKS} / ${Layout.NUM_DISKS}\n      )`,\n      width: `calc(${width})`,\n      transform: `translateX(calc(-1 * (${offset})))`,\n      borderRadius: `calc((${Layout.DISK_HEIGHT}) / 1.5)`,\n      border: \"1px solid black\",\n      boxShadow: \"inset 0 0 2px 0 black\",\n      background: `rgb(244, ${green}, 36)`\n    };\n    return connectDragSource(<div style={diskStyle} rank={rank} />);\n  }\n}\n\nexport default DragSource(ItemTypes.DISK, diskSource, collect)(Disk);\n","import React from \"react\";\nimport Layout from \"../constants/Layout\";\n\nconst Overlay = ({rank}) => {\n  const width = `(${Layout.TOWER_WIDTH} + ${rank * Layout.DISK_WIDTH_FACTOR}vw)`;\n  const offset = `${rank * Layout.DISK_WIDTH_FACTOR / 2}vw`;\n  // hue of green: divide spectrum from yellow (200) to red (36)\n  const green = 200 - rank * ((200 - 36) / Layout.NUM_DISKS);\n  const overlayStyle ={\n    background: `rgb(244, ${green}, 36)`,\n    transform: `translateX(calc(-1 * (${offset})))`,\n    border: \"1px solid black\",\n    borderRadius: `calc((${Layout.DISK_HEIGHT}) / 1.5)`,\n    height: `calc(\n        ${Layout.DISK_HEIGHT} * ${Layout.MAX_TOTAL_DISKS} / ${Layout.NUM_DISKS}\n      )`,\n    width: `calc(${width})`,\n    boxShadow: \"inset 0 0 2px 0 black\",\n    opacity: \"0.75\",\n  }\n  return (\n    <div style={overlayStyle} />\n  );\n};\n\nexport default Overlay;\n","import React, { Component } from \"react\";\nimport Layout from \"../constants/Layout\";\nimport Disk from \"./Disk\";\nimport Overlay from \"../util/Overlay\";\nimport { DropTarget } from \"react-dnd\";\nimport ItemTypes from \"../constants/ItemTypes\";\n\n// drop target specification that only handles the drop event\nconst towerTarget = {\n  canDrop({ isValidMove }, monitor) {\n    const diskIsOverTower = monitor.isOver();\n    const rank = monitor.getItem().rank;\n    const target = parseInt(monitor.targetId.substr(1)) + 1;\n    return diskIsOverTower ? isValidMove(rank, target) : false;\n  },\n  drop({ removeDisk, insertDisk }, monitor) {\n    const rank = monitor.getItem().rank;\n    const target = parseInt(monitor.targetId.substr(1)) + 1;\n    removeDisk(rank);\n    insertDisk(rank, target);\n  },\n  hover() {}\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  canDrop: monitor.canDrop(),\n  diskIsOverTower: monitor.isOver(),\n  diskDragged: monitor.getItem(),\n});\n\nclass Tower extends Component {\n  render() {\n    const {\n      disks,\n      connectDropTarget,\n      diskIsOverTower,\n      // canDrop,\n      diskDragged,\n      // gameIsWon,\n      // numMovesPlayed,\n    } = this.props;\n    const background = diskIsOverTower\n      ? `linear-gradient(\n          to bottom,\n          rgba(255, 204, 0, 1),\n          rgba(241, 91, 49, 0.9),\n          rgba(252,40, 93, 0.75),\n          rgba(0, 0, 0, 0.4)\n        )`\n      : `linear-gradient(\n          to bottom,\n          rgba(241, 91, 49, 0.9),\n          rgba(252,40, 93, 0.75),\n          rgba(0, 0, 0, 0.4)\n        )`;\n    const borderRadius = `calc((${Layout.TOWER_WIDTH}) / 4)`;\n    const towerStyle = {\n      position: \"relative\",\n      width: \"100%\",\n      height: `calc(${Layout.TOWER_HEIGHT})`,\n      borderStyle: \"solid\",\n      borderWidth: \"1px 1px 0px 1px\",\n      borderRadius: `${borderRadius} ${borderRadius} 0 0`,\n      display: \"grid\",\n      alignItems: \"end\",\n      alignContent: \"end\",\n      background: background,\n    };\n    \n    return connectDropTarget(\n      <div style={towerStyle}>\n        {/* render overlay while dragging disk over tower */}\n        {diskIsOverTower && <Overlay rank={diskDragged.rank} />}\n        {/* render disks if tower has any */}\n        {disks && disks.map(disk => <Disk key={disk.id} rank={disk.id} />)}\n      </div>\n    );\n  }\n}\n\nexport default DropTarget(ItemTypes.DISK, towerTarget, collect)(Tower);\n","import { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nexport default DragDropContext(HTML5Backend);\n","import React, { Component } from \"react\";\nimport Tower from \"./Tower\";\nimport Layout from \"../constants/Layout\";\nimport withDragDropContext from \"../../lib/withDragDropContext\";\n\nconst FloorSpace = () => (\n  <div style={{ borderBottom: \"1px solid black\" }} />\n);\n\nclass Setting extends Component {\n  render() {\n    const {\n      towers,\n      numMovesPlayed,\n      removeDisk,\n      insertDisk,\n      isValidMove,\n      gameIsWon\n    } = this.props;\n    let i = 0; // tower index\n    return (\n      <div style={settingStyle}>\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          gameIsWon={() => gameIsWon}\n        />\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          gameIsWon={() => gameIsWon}\n        />\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          gameIsWon={() => gameIsWon}\n        />\n        <FloorSpace />\n      </div>\n    );\n  }\n}\n\n// render style for three towers\nconst settingStyle = {\n  height: `calc(${Layout.SETTING_HEIGHT})`,\n  display: \"grid\",\n  gridTemplateColumns: `\n    1fr \n    calc(${Layout.TOWER_WIDTH})\n    1.75fr\n    calc(${Layout.TOWER_WIDTH})\n    1.75fr\n    calc(${Layout.TOWER_WIDTH})\n    1fr\n  `,\n  justifyContent: \"stretch\",\n  alignItems: \"end\",\n  overflow: \"hidden\",\n};\n\nexport default withDragDropContext(Setting);\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header\n        style={{\n          paddingBottom: \"0.5rem\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"flex-end\",\n          background: \"linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.2))\",\n          borderBottom: \"1px solid black\"\n        }}\n      >\n        <h1\n          style={{\n            color: \"rgba(229, 172, 0, 1)\",\n            fontSize: \"calc(100vmin/12)\", // responsive solution\n            textTransform: \"uppercase\",\n            fontWeight: \"100\",\n            textShadow: \"4px 4px 2px rgba(0, 0, 0, 1)\"\n          }}\n        >\n          {\"Towers of Hanoi\"}\n        </h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    const hrefFooter = {\n      color: \"rgba(241, 91, 49, 1)\",\n      textDecoration: \"none\",\n      fontWeight: \"600\",\n      textShadow: \"1.5px 1.5px 0px black\",\n    };\n    return (\n      <footer\n        style={{\n          padding: \"0 0.5rem\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          color: \"white\",\n          fontSize: \"1rem\",\n          background:\n            \"linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.8))\",\n        }}\n      >\n        <p style={{ textTransform: \"uppercase\" }}>\n          <a\n            href=\"https://github.com/simongt/towers-of-hanoi\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={hrefFooter}\n          >\n            <i\n              className=\"fab fa-github\"\n              style={{ marginRight: \"0.25rem\" }}\n            />\n            {\"GitHub\"}\n          </a>\n        </p>\n        <p style={{ textTransform: \"uppercase\" }}>\n          <a\n            href=\"https://simongt.net\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={hrefFooter}\n          >\n            {\"// simongt . net\"}\n          </a>\n        </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Setting from \"./game/Setting\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport Layout from \"./constants/Layout\";\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      numMovesPlayed: 0,\n      towers: [\n        { id: 1, disks: [] },\n        { id: 2, disks: [] },\n        { id: 3, disks: [] }\n      ],\n    };\n  } // end constructor\n\n  componentDidMount = () => {\n    const disks = [];\n    for(let id = 1; id <= Layout.NUM_DISKS; id++) {\n      disks.push({id: id});\n    }\n    this.setState({\n      towers: [\n        { id: 1, disks: disks },\n        { id: 2, disks: [] },\n        { id: 3, disks: [] }\n      ]\n    });\n  } // end componentDidMount\n\n  componentDidUpdate = () => {\n    const { numMovesPlayed } = this.state;\n    if (this.gameIsWon()) {\n      console.log(`Game has been won in ${numMovesPlayed} moves.`);\n    }\n  }  \n\n  removeDisk = (diskId) => {\n    this.setState(prevState => {\n      // traverse towers to filter out the moved disk\n      prevState.towers.forEach(tower => {\n        tower.disks = tower.disks.filter(disk => {\n          return disk.id !== diskId; // filter out moved disk\n        }); // end filter disks\n      }); // end forEach towers\n      return ({\n        towers: prevState.towers,\n      });\n    }); // end setState\n  }; // end removeDisk\n\n  insertDisk = (diskId, towerId) => {\n    this.setState(prevState => ({\n      // add disk to target tower\n      towers: prevState.towers.map(tower => {\n        if (tower.id === towerId) {\n          tower.disks.unshift({ id: diskId }); // insert to top of disk stack\n        }\n        return tower;\n      }), // end map towers\n      numMovesPlayed: prevState.numMovesPlayed + 1,\n    })); // end setState\n  } // end insertDisk\n\n  isValidMove = (diskId, towerId) => {\n    const { towers } = this.state;\n    // consider all disk move circumstances\n    if (towers[towerId - 1].disks.length === 0) {\n      // Valid move: disk may be dropped into an empty tower.\n      return true;\n    } else if (diskId < towers[towerId - 1].disks[0].id) {\n      // Valid move: disk may be dropped onto smaller disk.\n      return true;\n    } else if (diskId > towers[towerId - 1].disks[0].id) {\n      // Invalid move: disk may only be dropped on larger disk or empty tower.\n      return false;\n    } else if (diskId === towers[towerId - 1].disks[0].id) {\n      // Invalid move: disk may not be dropped on same tower that it came from.\n      return false;\n    }\n  } // end isValidMove\n\n  gameIsWon = () => {\n    // check for winning stack sequence on either tower 2 or 3\n    const { towers } = this.state;\n    return (\n      Layout.NUM_DISKS >= 3 && (\n        towers[1].disks.length === Layout.NUM_DISKS ||\n        towers[2].disks.length === Layout.NUM_DISKS\n      )\n    );\n  } // end gameIsWon\n\n  render() {\n    return (\n      <div style={layoutStyle}>\n        <Header />\n        <Setting\n          towers={this.state.towers}\n          numMovesPlayed={this.state.numMovesPlayed}\n          removeDisk={this.removeDisk}\n          insertDisk={this.insertDisk}\n          isValidMove={this.isValidMove}\n          gameIsWon={this.gameIsWon}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// responsive grid layout fits entire app into window view\nconst layoutStyle = {\n  display: \"grid\",\n  gridTemplateRows: `\n    calc(${Layout.HEADER_HEIGHT})\n    calc(${Layout.SETTING_HEIGHT})\n    ${Layout.FOOTER_HEIGHT}\n  `,\n  overflow: \"hidden\"\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./style/global.css\";\n\nconst mountNode = document.getElementById(\"root\");\n\nReactDOM.render(<App />, mountNode);\n"],"sourceRoot":""}
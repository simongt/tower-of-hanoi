{"version":3,"sources":["components/constants/Layout.js","components/constants/ItemTypes.js","components/game/Disk.jsx","components/util/Overlay.jsx","components/game/Tower.jsx","lib/withDragDropContext.js","components/game/Setting.jsx","components/layout/Header.jsx","components/layout/Footer.jsx","components/App.jsx","index.js"],"names":["TOWER_WIDTH","concat","SETTING_HEIGHT","TOWER_HEIGHT","Layout","HEADER_HEIGHT","FOOTER_HEIGHT","DISK_HEIGHT","DISK_WIDTH_FACTOR","NUM_DISKS","MAX_TOTAL_DISKS","ItemTypes","Disk","_this$props","this","props","rank","connectDragSource","isDragging","display","opacity","width","offset","green","diskStyle","height","transform","borderRadius","border","boxShadow","background","react_default","a","createElement","style","Component","DragSource","beginDrag","_ref","connect","monitor","dragSource","connectDragPreview","dragPreview","Overlay","overlayStyle","towerTarget","canDrop","isValidMove","isOnTop","diskIsOverTower","isOver","getItem","diskIsOnTop","target","parseInt","targetId","substr","drop","_ref2","removeDisk","insertDisk","hover","Tower","disks","connectDropTarget","diskDragged","towerStyle","position","borderStyle","borderWidth","alignItems","alignContent","util_Overlay","map","disk","game_Disk","key","id","DropTarget","dropTarget","DragDropContext","HTML5Backend","FloorSpace","borderBottom","Setting","towers","numMovesPlayed","gameIsWon","i","settingStyle","Setting_FloorSpace","game_Tower","diskId","towerId","gridTemplateColumns","justifyContent","overflow","withDragDropContext","Header","paddingBottom","color","fontSize","textTransform","fontWeight","textShadow","Footer","hrefFooter","textDecoration","padding","href","rel","className","marginRight","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","push","setState","componentDidUpdate","state","console","log","prevState","forEach","tower","filter","unshift","length","layoutStyle","layout_Header","game_Setting","layout_Footer","gridTemplateRows","mountNode","document","getElementById","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.82ce8b8b.chunk.js","sourcesContent":["// TO-DO: test responsiveness for windows with low height and high width\n\n// game pieces\nconst NUM_DISKS = 3;\nconst MAX_TOTAL_DISKS = 9;\n\n// dimensions\nconst TOWER_WIDTH = `${2 * MAX_TOTAL_DISKS / NUM_DISKS}vw`;\nconst HEADER_HEIGHT = `100vmin/6`;\nconst FOOTER_HEIGHT = `2rem`;\nconst SETTING_HEIGHT = `(100vh - ${HEADER_HEIGHT} - ${FOOTER_HEIGHT})`;\nconst TOWER_HEIGHT = `(${TOWER_WIDTH}) * (${NUM_DISKS} + 1)`;\nconst DISK_HEIGHT = `((${TOWER_HEIGHT}) / 12)`;\n\n// disk width factor\nconst getWidthFactor = () => {\n  switch (NUM_DISKS) {\n    case 1:\n      return 13;\n    case 2:\n      return 10.5;\n    case 3:\n      return 8;\n    case 4:\n      return 6.5;\n    case 5:\n      return 5;\n    case 6:\n      return 4.5;\n    case 7:\n      return 4;\n    case 8:\n      return 3.5;\n    case 9:\n      return 3;\n    default:\n      return 3;\n  }\n}\n\nconst DISK_WIDTH_FACTOR = getWidthFactor();\n\nexport default {\n  TOWER_WIDTH,\n  HEADER_HEIGHT,\n  FOOTER_HEIGHT,\n  SETTING_HEIGHT,\n  TOWER_HEIGHT,\n  DISK_HEIGHT,\n  DISK_WIDTH_FACTOR,\n  NUM_DISKS,\n  MAX_TOTAL_DISKS,\n};\n","// constants for the draggable item types\nexport default {\n  DISK: 'disk',\n}","import React, { Component } from 'react'\nimport Layout from \"../constants/Layout\";\nimport { DragSource } from \"react-dnd\";\nimport ItemTypes from \"../constants/ItemTypes\";\n\n// draggable object\nconst diskSource = {\n  beginDrag({ rank }) {\n    return { rank };\n  },\n}\n\n// collecting function\nconst collect = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging(),\n});\n\nclass Disk extends Component {\n  render() {\n    const { rank, connectDragSource, isDragging } = this.props;\n    const display = isDragging ? \"none\" : \"block\";\n    const opacity = isDragging ? 0.5 : 1;\n    const width = `(${Layout.TOWER_WIDTH} + ${rank * Layout.DISK_WIDTH_FACTOR}vw)`;\n    const offset = `${rank * Layout.DISK_WIDTH_FACTOR / 2}vw`;\n    // hue of green: divide spectrum from yellow (200) to red (36)\n    const green = 200 - rank * ((200 - 36) / Layout.NUM_DISKS);\n    const diskStyle = {\n      display: display,\n      opacity: opacity,\n      height: `calc(\n        ${Layout.DISK_HEIGHT} * ${Layout.MAX_TOTAL_DISKS} / ${Layout.NUM_DISKS}\n      )`,\n      width: `calc(${width})`,\n      transform: `translateX(calc(-1 * (${offset})))`,\n      borderRadius: `calc((${Layout.DISK_HEIGHT}) / 1.5)`,\n      border: \"1px solid black\",\n      boxShadow: \"inset 0 0 2px 0 black\",\n      background: `rgb(244, ${green}, 36)`\n    };\n    return connectDragSource(<div style={diskStyle} rank={rank} />);\n  }\n}\n\nexport default DragSource(ItemTypes.DISK, diskSource, collect)(Disk);\n","import React from \"react\";\nimport Layout from \"../constants/Layout\";\n\nconst Overlay = ({rank}) => {\n  const width = `(${Layout.TOWER_WIDTH} + ${rank * Layout.DISK_WIDTH_FACTOR}vw)`;\n  const offset = `${rank * Layout.DISK_WIDTH_FACTOR / 2}vw`;\n  // hue of green: divide spectrum from yellow (200) to red (36)\n  const green = 200 - rank * ((200 - 36) / Layout.NUM_DISKS);\n  const overlayStyle ={\n    background: `rgb(244, ${green}, 36)`,\n    transform: `translateX(calc(-1 * (${offset})))`,\n    border: \"1px solid black\",\n    borderRadius: `calc((${Layout.DISK_HEIGHT}) / 1.5)`,\n    height: `calc(\n        ${Layout.DISK_HEIGHT} * ${Layout.MAX_TOTAL_DISKS} / ${Layout.NUM_DISKS}\n      )`,\n    width: `calc(${width})`,\n    boxShadow: \"inset 0 0 2px 0 black\",\n    opacity: \"0.75\",\n  }\n  return (\n    <div style={overlayStyle} />\n  );\n};\n\nexport default Overlay;\n","import React, { Component } from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport Disk from \"./Disk\";\nimport Overlay from \"../util/Overlay\";\nimport Layout from \"../constants/Layout\";\nimport ItemTypes from \"../constants/ItemTypes\";\n\n// drop target specification that only handles the drop event\nconst towerTarget = {\n  canDrop({ isValidMove, isOnTop }, monitor) {\n    const diskIsOverTower = monitor.isOver();\n    const rank = monitor.getItem().rank;\n    const diskIsOnTop = isOnTop(rank);\n    const target = parseInt(monitor.targetId.substr(1)) + 1;\n    return diskIsOverTower && diskIsOnTop ? isValidMove(rank, target) : false;\n  },\n  drop({ removeDisk, insertDisk }, monitor) {\n    const rank = monitor.getItem().rank;\n    const target = parseInt(monitor.targetId.substr(1)) + 1;\n    removeDisk(rank);\n    insertDisk(rank, target);\n  },\n  hover() {}\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  canDrop: monitor.canDrop(),\n  diskIsOverTower: monitor.isOver(),\n  diskDragged: monitor.getItem(),\n});\n\nclass Tower extends Component {\n  render() {\n    const {\n      disks,\n      connectDropTarget,\n      diskIsOverTower,\n      // canDrop,\n      diskDragged,\n      // gameIsWon,\n      // numMovesPlayed,\n    } = this.props;\n    const background = diskIsOverTower\n      ? `linear-gradient(\n          to bottom,\n          rgba(255, 204, 0, 1),\n          rgba(241, 91, 49, 0.9),\n          rgba(252,40, 93, 0.75),\n          rgba(0, 0, 0, 0.4)\n        )`\n      : `linear-gradient(\n          to bottom,\n          rgba(241, 91, 49, 0.9),\n          rgba(252,40, 93, 0.75),\n          rgba(0, 0, 0, 0.4)\n        )`;\n    const borderRadius = `calc((${Layout.TOWER_WIDTH}) / 4)`;\n    const towerStyle = {\n      position: \"relative\",\n      width: \"100%\",\n      height: `calc(${Layout.TOWER_HEIGHT})`,\n      borderStyle: \"solid\",\n      borderWidth: \"1px 1px 0px 1px\",\n      borderRadius: `${borderRadius} ${borderRadius} 0 0`,\n      display: \"grid\",\n      alignItems: \"end\",\n      alignContent: \"end\",\n      background: background,\n    };\n    \n    return connectDropTarget(\n      <div style={towerStyle}>\n        {/* render overlay while dragging disk over tower */}\n        {diskIsOverTower && <Overlay rank={diskDragged.rank} />}\n        {/* render disks if tower has any */}\n        {disks && disks.map(disk => <Disk key={disk.id} rank={disk.id} />)}\n      </div>\n    );\n  }\n}\n\nexport default DropTarget(ItemTypes.DISK, towerTarget, collect)(Tower);\n","import { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nexport default DragDropContext(HTML5Backend);\n","import React, { Component } from \"react\";\nimport Tower from \"./Tower\";\nimport Layout from \"../constants/Layout\";\nimport withDragDropContext from \"../../lib/withDragDropContext\";\n\nconst FloorSpace = () => (\n  <div style={{ borderBottom: \"1px solid black\" }} />\n);\n\nclass Setting extends Component {\n  render() {\n    const {\n      towers,\n      numMovesPlayed,\n      removeDisk,\n      insertDisk,\n      isValidMove,\n      isOnTop,\n      gameIsWon\n    } = this.props;\n    let i = 0; // tower index\n    return (\n      <div style={settingStyle}>\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          isOnTop={(diskId) => isOnTop(diskId)}\n        />\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          isOnTop={(diskId) => isOnTop(diskId)}\n          gameIsWon={() => gameIsWon()}\n        />\n        <FloorSpace />\n        <Tower\n          key={towers[i].id}\n          disks={towers[i++].disks}\n          numMovesPlayed={numMovesPlayed}\n          removeDisk={(diskId) => removeDisk(diskId)}\n          insertDisk={(diskId, towerId) => insertDisk(diskId, towerId)}\n          isValidMove={(diskId, towerId) => isValidMove(diskId, towerId)}\n          isOnTop={(diskId) => isOnTop(diskId)}\n          gameIsWon={() => gameIsWon()}\n        />\n        <FloorSpace />\n      </div>\n    );\n  }\n}\n\n// render style for three towers\nconst settingStyle = {\n  height: `calc(${Layout.SETTING_HEIGHT})`,\n  display: \"grid\",\n  gridTemplateColumns: `\n    1fr \n    calc(${Layout.TOWER_WIDTH})\n    1.75fr\n    calc(${Layout.TOWER_WIDTH})\n    1.75fr\n    calc(${Layout.TOWER_WIDTH})\n    1fr\n  `,\n  justifyContent: \"stretch\",\n  alignItems: \"end\",\n  overflow: \"hidden\",\n};\n\nexport default withDragDropContext(Setting);\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header\n        style={{\n          paddingBottom: \"0.5rem\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"flex-end\",\n          background: \"linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.2))\",\n          borderBottom: \"1px solid black\"\n        }}\n      >\n        <h1\n          style={{\n            color: \"rgba(229, 172, 0, 1)\",\n            fontSize: \"calc(100vmin/12)\", // responsive solution\n            textTransform: \"uppercase\",\n            fontWeight: \"100\",\n            textShadow: \"4px 4px 2px rgba(0, 0, 0, 1)\"\n          }}\n        >\n          {\"Towers of Hanoi\"}\n        </h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    const hrefFooter = {\n      color: \"rgba(241, 91, 49, 1)\",\n      textDecoration: \"none\",\n      fontWeight: \"600\",\n      textShadow: \"1.5px 1.5px 0px black\",\n    };\n    return (\n      <footer\n        style={{\n          padding: \"0 0.5rem\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          color: \"white\",\n          fontSize: \"1rem\",\n          background:\n            \"linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.8))\",\n        }}\n      >\n        <p style={{ textTransform: \"uppercase\" }}>\n          <a\n            href=\"https://github.com/simongt/towers-of-hanoi\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={hrefFooter}\n          >\n            <i\n              className=\"fab fa-github\"\n              style={{ marginRight: \"0.25rem\" }}\n            />\n            {\"GitHub\"}\n          </a>\n        </p>\n        <p style={{ textTransform: \"uppercase\" }}>\n          <a\n            href=\"https://simongt.net\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={hrefFooter}\n          >\n            {\"// simongt . net\"}\n          </a>\n        </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Setting from \"./game/Setting\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport Layout from \"./constants/Layout\";\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      numMovesPlayed: 0,\n      towers: [\n        { id: 1, disks: [] },\n        { id: 2, disks: [] },\n        { id: 3, disks: [] }\n      ],\n    };\n  } // end constructor\n\n  componentDidMount = () => {\n    const disks = [];\n    for(let id = 1; id <= Layout.NUM_DISKS; id++) {\n      disks.push({ id: id });\n    }\n    this.setState({\n      towers: [\n        { id: 1, disks: disks },\n        { id: 2, disks: [] },\n        { id: 3, disks: [] }\n      ]\n    });\n  } // end componentDidMount\n\n  componentDidUpdate = () => {\n    const { numMovesPlayed } = this.state;\n    if (this.gameIsWon()) {\n      console.log(`Game has been won in ${numMovesPlayed} moves.`);\n    }\n  }  \n\n  removeDisk = (diskId) => {\n    let towerId = null; // return tower id of disk removed\n    this.setState(prevState => {\n      // traverse towers to filter out the moved disk\n      prevState.towers.forEach(tower => {\n        tower.disks = tower.disks.filter(disk => {\n          if (disk.id === diskId) { // filter out moved disk\n            towerId = tower.id;\n            return false; // exclude disk\n          } else {\n            return true; // include disk\n          }\n        }); // end filter disks\n      }); // end forEach towers\n      return ({\n        towers: prevState.towers,\n      });\n    }); // end setState\n    return towerId;\n  }; // end removeDisk\n\n  insertDisk = (diskId, towerId) => {\n    this.setState(prevState => ({\n      // add disk to target tower\n      towers: prevState.towers.map(tower => {\n        if (tower.id === towerId) {\n          tower.disks.unshift({ id: diskId }); // insert to top of disk stack\n        }\n        return tower;\n      }), // end map towers\n      numMovesPlayed: prevState.numMovesPlayed + 1,\n    })); // end setState\n  } // end insertDisk\n\n  isValidMove = (diskId, towerId) => {\n    const { towers } = this.state;\n    // consider all disk-move circumstances\n    if (towers[towerId - 1].disks.length === 0) {\n      // valid move: disk may be dropped onto an empty tower\n      return true;\n    } else if (diskId < towers[towerId - 1].disks[0].id) {\n      // valid move: disk may be dropped onto smaller disk\n      return true;\n    } else if (diskId > towers[towerId - 1].disks[0].id) {\n      // invalid move: disk may only be dropped on larger disk or empty tower\n      return false;\n    } else if (diskId === towers[towerId - 1].disks[0].id) {\n      // invalid move: disk may not be dropped onto same tower it came from\n      return false;\n    }\n  } // end isValidMove\n\n  isOnTop = (diskId) => {\n    const { towers } = this.state;\n    let diskIsOnTop = false;\n    towers.forEach(tower => {\n      if (tower.disks.length !== 0) {\n        if (tower.disks[0].id === diskId) {\n          diskIsOnTop = true;\n        }\n      }\n    });\n    return diskIsOnTop;\n  } // end isOnTop\n\n  gameIsWon = () => {\n    // check for winning stack sequence on either tower 2 or 3\n    const { towers } = this.state;\n    return (\n      Layout.NUM_DISKS >= 3 && (\n        towers[1].disks.length === Layout.NUM_DISKS ||\n        towers[2].disks.length === Layout.NUM_DISKS\n      )\n    );\n  } // end gameIsWon\n\n  render() {\n    return (\n      <div style={layoutStyle}>\n        <Header />\n        <Setting\n          towers={this.state.towers}\n          numMovesPlayed={this.state.numMovesPlayed}\n          removeDisk={this.removeDisk}\n          insertDisk={this.insertDisk}\n          isValidMove={this.isValidMove}\n          isOnTop={this.isOnTop}\n          gameIsWon={this.gameIsWon}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// responsive grid layout fits entire app into window view\nconst layoutStyle = {\n  display: \"grid\",\n  gridTemplateRows: `\n    calc(${Layout.HEADER_HEIGHT})\n    calc(${Layout.SETTING_HEIGHT})\n    ${Layout.FOOTER_HEIGHT}\n  `,\n  overflow: \"hidden\"\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./style/global.css\";\n\nconst mountNode = document.getElementById(\"root\");\n\nReactDOM.render(<App />, mountNode);\n"],"sourceRoot":""}